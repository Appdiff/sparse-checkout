name: 'Sparse checkout action'
description: 'Sparse checkout a git repository'
branding:
  icon: 'minimize-2'
  color: 'gray-dark'
inputs:
  # Sparse checkout
  patterns:
    description: >
      Write a set of patterns to the sparse-checkout file.

      [Learn more about set](https://git-scm.com/docs/git-sparse-checkout#Documentation/git-sparse-checkout.txt-emsetem)
    required: true

  # Same as actions/checkout
  repository:
    description: 'Repository name with owner. For example, snow-actions/sparse-checkout'
    default: ${{ github.repository }}
    required: false
  ref:
    description: >
      The branch, tag or SHA to checkout. When checking out the repository that
      triggered a workflow, this defaults to the reference or SHA for that
      event.  Otherwise, uses the default branch.
    required: false
  token:
    description: >
      Personal access token (PAT) used to fetch the repository. The PAT is configured
      with the local git config, which enables your scripts to run authenticated git
      commands. The post-job step removes the PAT.


      We recommend using a service account with the least permissions necessary.
      Also when generating a new PAT, select the least scopes necessary.


      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
    default: ${{ github.token }}
    required: false
  path:
    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'
    default: '.'
    required: false

runs:
  using: composite
  steps:
    - name: Setting git path
      run: |
        if [ "$RUNNER_OS" == "macOS" ]; then
          if [ ! -f /usr/local/bin/git ]; then
            echo "GIT=/usr/bin/git" >> $GITHUB_ENV
          else
            echo "GIT=/usr/local/bin/git" >> $GITHUB_ENV
          fi
        elif [ "$RUNNER_OS" == "Windows" ]; then
          echo "GIT=/cmd/git" >> $GITHUB_ENV
        else
          echo "GIT=/usr/bin/git" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Getting Git version info
      run: |
        echo "::group::Getting Git version info"
        $GIT version
        echo "::endgroup::"
      shell: bash

    - name: cleanup #https://github.com/actions/checkout/issues/211
      run: |
        sudo chown -R $USER:$USER ${{ github.workspace }} || true
      shell: bash

    - name: Ensure clean directory
      run: |
        sudo rm -rfv ${{ github.workspace }}/* || true
        sudo rm -rfv ${{ github.workspace }}/.git || true
        sudo rm -rfv ${{ github.workspace }}/.teamcity || true
        sudo rm -rfv ${{ github.workspace }}/.github || true
        sudo rm ${{ github.workspace }}/.dockerignore || true
        sudo rm ${{ github.workspace }}/.gitignore || true
        ls -la ${{ github.workspace }}
      env:
        DIRECTORY: ${{ inputs.path }}
      shell: bash
    
    - id: branch
      run: |
        if [[ "${{ github.ref }}" != "refs/tags/"* ]]; then
          BASE_REF=$(printf "%q" "${{ github.base_ref }}")
          HEAD_REF=$(printf "%q" "${{ github.head_ref }}")
          REF=$(printf "%q" "${{ github.ref }}")
          BASE_REF=${BASE_REF/refs\/heads\//}
          HEAD_REF=${HEAD_REF/refs\/heads\//}
          echo "::set-output name=base_ref_branch::$(eval printf "%s" "$BASE_REF")"
          echo "::set-output name=head_ref_branch::$(eval printf "%s" "$HEAD_REF")"
          REF_BRANCH=${REF/refs\/pull\//}
          REF_BRANCH=${REF_BRANCH/refs\/heads\//}
          echo "::set-output name=ref_branch::$(eval printf "%s" "$REF_BRANCH")"
        fi
      shell: bash
      
    - id: current_branch
      run: |
        if [[ "${{ github.ref }}" != "refs/tags/"* ]]; then
          if [[ ${{ github.event_name }} == 'pull_request' ]]; then
            echo "::set-output name=current_branch::${{ steps.branch.outputs.head_ref_branch }}"
          else
            echo "::set-output name=current_branch::${{ steps.branch.outputs.ref_branch }}"
          fi
        else
          REF=$(printf "%q" "${{ github.ref }}")
          REF_BRANCH=${REF/refs\/tags\/${{ inputs.strip_tag_prefix }}/}
          echo "::set-output name=current_branch::$(eval printf "%s" "$REF_BRANCH")"
        fi
      shell: bash
      
    - id: default
      run: |
        if [[ "${{ github.ref }}" != "refs/tags/"* ]]; then
          if [[ "${{ steps.current_branch.outputs.current_branch }}" == "${{ steps.branch.outputs.ref_branch }}" ]]; then
            echo "::set-output name=is_default::true"
          else
            echo "::set-output name=is_default::false"
          fi
        fi
      shell: bash
      
    - id: tag
      run: |
        if [[ "${{ github.ref }}" == "refs/tags/"* ]]; then
          REF=$(printf "%q" "${{ github.ref }}")
          TAG=${REF/refs\/tags\/${{ inputs.strip_tag_prefix }}/}
          echo "::set-output name=tag::$(eval printf "%s" "$TAG")"
          echo "::set-output name=is_tag::true"
        else
          echo "::set-output name=is_tag::false"
        fi
      shell: bash

    - name: Clone the repository (bare)
      run: |
        echo "::group::Cloning the repository"
        $GIT -c protocol.version=2 clone --branch ${{ steps.current_branch.outputs.current_branch }} --filter=blob:none --no-checkout ${GITHUB_SERVER_URL/https:\/\//https:\/\/x-access-token:${GH_TOKEN}@}/${REPOSITORY} .
        echo "::endgroup::"
      env:
        REPOSITORY: ${{ inputs.repository }}
        GH_TOKEN: ${{ inputs.token }}
      working-directory: ${{ inputs.path }}
      shell: bash

    - name: Sparse checkout
      run: |
        echo "::group::Setting up sparse checkout"
        $GIT sparse-checkout set $PATTERNS
        $GIT read-tree -mu HEAD
        echo "::endgroup::"
      env:
        PATTERNS: ${{ inputs.patterns }}
      working-directory: ${{ inputs.path }}
      shell: bash
